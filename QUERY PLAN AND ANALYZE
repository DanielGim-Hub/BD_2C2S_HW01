"Nested Loop  (cost=20.43..46.44 rows=1 width=744) (actual time=0.029..0.034 rows=2 loops=1)"
"  Output: c.customer_id, c.name, c.city, o.order_id, o.order_date, o.status, oi.product_name, oi.quantity, oi.price"
"  Inner Unique: true"
"  Join Filter: (o.customer_id = c.customer_id)"
"  Rows Removed by Join Filter: 1"
"  ->  Hash Join  (cost=20.43..34.30 rows=1 width=308) (actual time=0.025..0.027 rows=2 loops=1)"
"        Output: o.order_id, o.order_date, o.status, o.customer_id, oi.product_name, oi.quantity, oi.price"
"        Inner Unique: true"
"        Hash Cond: (oi.order_id = o.order_id)"
"        ->  Seq Scan on public.order_items oi  (cost=0.00..13.62 rows=97 width=242) (actual time=0.011..0.012 rows=3 loops=1)"
"              Output: oi.item_id, oi.order_id, oi.product_name, oi.quantity, oi.price"
"              Filter: (oi.quantity >= 2)"
"              Rows Removed by Filter: 2"
"        ->  Hash  (cost=20.38..20.38 rows=4 width=70) (actual time=0.008..0.008 rows=3 loops=1)"
"              Output: o.order_id, o.order_date, o.status, o.customer_id"
"              Buckets: 1024  Batches: 1  Memory Usage: 9kB"
"              ->  Seq Scan on public.orders o  (cost=0.00..20.38 rows=4 width=70) (actual time=0.004..0.005 rows=3 loops=1)"
"                    Output: o.order_id, o.order_date, o.status, o.customer_id"
"                    Filter: ((o.status)::text = 'Completed'::text)"
"                    Rows Removed by Filter: 1"
"  ->  Seq Scan on public.customers c  (cost=0.00..12.12 rows=1 width=440) (actual time=0.002..0.002 rows=2 loops=2)"
"        Output: c.customer_id, c.name, c.city"
"        Filter: ((c.city)::text = 'Moscow'::text)"
"        Rows Removed by Filter: 0"
"Planning Time: 0.546 ms"
"Execution Time: 0.062 ms"

Основной оператор — это Nested Loop, который соединил таблицу клиентов customers с результатом промежуточного соединения таблиц orders и order_items.
На первом этапе был выполнен Hash Join между таблицами orders и order_items по условию oi.order_id = o.order_id. 
Таблица order_items была прочитана полностью с помощью последовательного сканирования (Seq Scan), 
при этом фильтр (oi.quantity >= 2) отфильтровал 2 строки, оставив только 3 подходящих записи. 
Далее таблица orders также была прочитана последовательно (Seq Scan), где фильтр (o.status = 'Completed') исключил 1 строку, оставив 3 подходящих заказа. 
Для выполнения хеш-соединения был построен хеш по заказам (Hash), использовано 9 КБ оперативной памяти, число бакетов — 1024, что является стандартным.
После получения промежуточного результата Hash Join (2 строки) выполняется Nested Loop, который соединяет его с таблицей customers. 
Таблица клиентов также сканируется последовательно (Seq Scan), 
но благодаря условию фильтрации (c.city = 'Moscow') остаются только 2 клиента.
Стоит отметить, что при соединении в Nested Loop был применён фильтр Join Filter: (o.customer_id = c.customer_id), 
в результате которого одна строка была удалена (Rows Removed by Join Filter: 1), а две строки прошли дальше.
В плане видим, что PostgreSQL решил не использовать индекс для таблицы customers, хотя он есть по первичному ключу. 
Это может быть связано с тем, что таблица маленькая, и оптимизатор посчитал сканирование таблицы целиком дешевле.
